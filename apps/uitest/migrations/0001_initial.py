# -*- coding: utf-8 -*-
# Generated by Django 1.11.7 on 2018-07-09 16:54
from __future__ import unicode_literals

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('case', '0026_auto_20180709_1654'),
        ('device', '0007_device_version'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeviceRelateEnv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='device.Device', verbose_name='设备')),
            ],
            options={
                'verbose_name': '设备关联',
                'verbose_name_plural': '设备关联',
            },
        ),
        migrations.CreateModel(
            name='EnvConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.FileField(blank=True, null=True, upload_to='app/', verbose_name='被测应用')),
                ('test_app', models.FileField(blank=True, null=True, upload_to='app/', verbose_name='测试应用')),
                ('app_script_type', models.CharField(choices=[('appium', 'Appimu'), ('robotium', 'robotium')], max_length=30, verbose_name='类型')),
                ('is_scene_test', models.BooleanField(default=False, verbose_name='是否场景测试')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '执行环境配置',
                'verbose_name_plural': '执行环境配置',
            },
        ),
        migrations.CreateModel(
            name='TestDataConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='名称')),
                ('type', models.CharField(choices=[('test', '测试环境'), ('gld', '灰度环境'), ('pro', '生产环境')], max_length=30, verbose_name='类型')),
                ('web_url', models.CharField(max_length=100, verbose_name='web域名')),
                ('database_host', models.CharField(max_length=100, verbose_name='数据库链接')),
                ('database_port', models.CharField(max_length=10, verbose_name='数据库端口')),
                ('database_user', models.CharField(max_length=100, verbose_name='数据库用户名')),
                ('database_password', models.CharField(max_length=100, verbose_name='数据库密码')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '测试数据配置',
                'verbose_name_plural': '测试数据配置',
            },
        ),
        migrations.AddField(
            model_name='envconfig',
            name='data_config',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='uitest.TestDataConfig', verbose_name='测试数据配置'),
        ),
        migrations.AddField(
            model_name='envconfig',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='env', to='case.TestTask', verbose_name='测试任务'),
        ),
        migrations.AddField(
            model_name='devicerelateenv',
            name='env',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relate_device', to='uitest.EnvConfig', verbose_name='环境'),
        ),
    ]
